============================================
DOCKER

// Containerizing the Platform Service
cd C:\Users\fanis\source\repos\DotNET6MicroservicesYT\PlatformService
docker build -t faniskar/platformservice .

docker run -p 8085:80 -d faniskar/platformservice

// showing the running containers
docker ps

// stop the container
docker stop <container id>

// restart the same container
docker start <container id>

// Pushing to Docker Hub
docker push faniskar/platformservice

// *****************

// Containerizing the Commands Service
cd C:\Users\fanis\source\repos\DotNET6MicroservicesYT\CommandsService
docker build -t faniskar/commandsservice .

docker run -p 8086:80 -d faniskar/commandsservice

// Pushing to Docker Hub
docker push faniskar/commandsservice


============================================

K8S

This folder contains deployment files.

1) Create the K8S\platforms-depl.yaml (don't use tabs. only double-spaces.)

cd C:\Users\fanis\source\repos\DotNET6MicroservicesYT\K8S

// to make sure that k8s is running.
kubectl version

// create the platforms deployment
kubectl apply -f platforms-depl.yaml


// delete depl
kubectl delete deployment platforms-depl

kubectl get pods

// In Docker Desktop, we see 2 containers 
(
1. k8s_POD_platforms-depl-79... <-- the pod
2. k8s_platformsservice_platforms-depl-79.. <- the actual container
)

if we delete the k8s_platformsservice_platforms-depl-79 container
it will start again (that's the whole point of K8S).

2) Create the "Node Port" (external port to access the platform service)
K8S\platforms-np-srv.yaml

// create the node port
kubectl apply -f platforms-np-srv.yaml

// to make sure it's created
kubectl get services

// To access the service externally PORT: 80:30623/TCP (from kubectl get services)

// Now we can access the Platform Service through K8S
// http://localhost:30623/api/platforms/ 

// ***************************

// quick check up
cd C:\Users\fanis\source\repos\DotNET6MicroservicesYT\K8S
kubectl get deployments
kubectl get pods
kubectl get services

// apply the platforms-depl.yaml again
kubectl apply -f platforms-depl.yaml

// restart the platform image
kubectl rollout restart deployment platforms-depl

// ***************************
// Ingress nginx
https://kubernetes.github.io/ingress-nginx/deploy/#docker-desktop

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.1/deploy/static/provider/aws/deploy.yaml

kubectl get namespace
kubectl get pods --namespace=ingress-nginx

// apply the ingress-srv.yaml
kubectl apply -f ingress-srv.yaml

// get storage class
kubectl get storageclass

kubectl apply -f local-pvc.yaml

kubectl get pvc

// we should remember the two keys (mssql, SA_PASSWORD)
kubectl create secret generic mssql --from-literal=SA_PASSWORD="pa55w0rd!"

kubectl apply -f mssql-plat-depl.yaml
kubectl rollout restart deployment mssql-plat-depl

// Connect to sql server with SSMS
// SOS: we should have only one SQLSERVER service running MSSQLSERVER OR SQLEXPRESS (in this project SQLEXPRESS)
SERVER: localhost,1433
USERNAME: sa
PASSWORD: pa55w0rd!

============================================

Entity Framework migrations

enable-migrations

add-migration initialmigration